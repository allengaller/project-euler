package probs.prob_26_50
{
	import probs.Problem;
	
	/**
	 * <B>Problem 29</B>
	 <div class="problem_content" role="problem">
	 <p>Consider all integer combinations of <i>a</i><sup><i>b</i></sup> for 2 <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> <i>a</i> <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> 5 and 2 <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> <i>b</i> <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> 5:</p>
	 <blockquote>2<sup>2</sup>=4, 2<sup>3</sup>=8, 2<sup>4</sup>=16, 2<sup>5</sup>=32<br>
	 3<sup>2</sup>=9, 3<sup>3</sup>=27, 3<sup>4</sup>=81, 3<sup>5</sup>=243<br>
	 4<sup>2</sup>=16, 4<sup>3</sup>=64, 4<sup>4</sup>=256, 4<sup>5</sup>=1024<br>
	 5<sup>2</sup>=25, 5<sup>3</sup>=125, 5<sup>4</sup>=625, 5<sup>5</sup>=3125<br></blockquote>
	 <p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:</p>
	 <p style="text-align:center;">4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125</p>
	 <p>How many distinct terms are in the sequence generated by <i>a</i><sup><i>b</i></sup> for 2 <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> <i>a</i> <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> 100 and 2 <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> <i>b</i> <img src="images/symbol_le.gif" width="10" height="12" alt="≤" border="0" style="vertical-align:middle;"> 100?</p>
	 </div>
	 * @author Tim Wu <a href="http://wuzhiwei.net">http://wuzhiwei.net</a><br>
	 * 
	 */
	public class Prob29 extends Problem
	{
		public function Prob29()
		{
			/*
			2 4 8 16 32 64
			3 9 27 81
			4 16 64
			5 25
			6 36
			7 49
			8 64
			9 81
			10 100
			
			2 6*20 = 2 3*40
			64 20 = 8 40
			
			 * */
			
			var totalNum:int = 99*99;
			var repeat:int = 0;
			
			var rList:Array = [];
			var baseList:Array = [2,3,5,6,7,10];
			var pList:Array = [];
			for each ( var b:int in baseList )
			{
				rList[b] = {};
				pList = getPowerNumList( b );
				for each(var p:int in pList )
				{
					for ( var i:int = 2;i<=100;i++)
					{
						if( rList[b][p*i] )
						{
							repeat ++;
						}
						else
						{
							rList[b][p*i] = "mark";
						}
					}
				}
			}
			super.showAnswerStr( "Repeat: "+repeat + "So Result:"+( totalNum - repeat ) );
		}
		
		private function getPowerNumList( num:int ):Array
		{
			var res:Array = [1];
			var power:int = 2;
			var prod:int = num;
			while( num*prod <= 100 )
			{
				prod *= num;
				res.push( power++ );
			}
			return res;
		}
	}
}